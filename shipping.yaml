- name: shipping
  hosts: shipping
  become: yes
  vars:
  mysql_password: RoboShop@1
  tasks:
  - name: Install Maven
    ansible.builitin.dnf:
      name: maven
      state: present

  - name: create roboshop user
    ansible.builtin.user:
      name: roboshop

  - name: recursively remove app directory
    ansible.builtin.file:
      path: /app
      state: absent

  - name: creating app directory
    ansible.builtin.file:
      path: /app
      state: directory

  - name: download shipping 
    ansible.builtin.get_url:
      url: https://roboshop-builds.s3.amazonaws.com/shipping.zip
      dest: /tmp
  
  - name: unarchieve user
    ansible.builtin.unarchive:
      src: /tmp/shipping.zip
      dest: /app
      remote_src: yes
  
  - name: install dependencies
    ansible.builtin.command: mvn clean package
    args:
      chdir: /app

  - name: rename jar file
    ansible.builtin.command: mv target/shipping-1.0.jar shipping.jar
    args:
      chdir: /app

  - name: copy shipping service file
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service
  
  - name: daemon reload
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: install mysql client
    ansible.builtin.dnf:
      name: mysql
      state: present

  - name: checking cities schema exists or not
    ansible.builtin.command: mysql -h mysql.daws76s.online -uroot -p{{mysql_password}} -sN -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'cities'"
    register: schema

  - name: print schema output
    ansible.builtin.debug:
      msg: "schema output: {{schema}}"

  - name: load cities schema
    ansible.builtin.shell: mysql -h mysql.devopss.online -uroot -p{{mysql_password}} < /app/schema/shipping.sql
    when: schema.stdout != "1"

  - name: start and enable shipping
    ansible.builtin.service:
      name: shipping
      state: restarted
      enabled: yes


